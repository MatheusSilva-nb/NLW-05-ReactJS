{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/null/estudos/NLW5-ReactJs/src/contexts/PlayerContexts.tsx\";\nimport { createContext, useContext, useState } from \"react\";\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      play,\n      playNext,\n      playPrevious,\n      playList,\n      setPlayingState,\n      togglePlay,\n      toggleLoop,\n      toggleShuffle,\n      clearPlayerState,\n      hasPrevious,\n      hasNext\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/home/null/estudos/NLW5-ReactJs/src/contexts/PlayerContexts.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","clearPlayerState","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\n\ninterface Episode {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\ninterface PlayerContextData {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    isLooping: boolean;\n    isShuffling: boolean;\n    play: (episode: Episode) => void;\n    playNext: () => void;\n    playPrevious: () => void;\n    playList: (list: Episode[], index: number) => void;\n    setPlayingState: (state: boolean) => void;\n    togglePlay: () => void;\n    toggleLoop: () => void;\n    toggleShuffle: () => void;\n    clearPlayerState: () => void;\n    hasPrevious: boolean;\n    hasNext: boolean;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ninterface PlayerContextProviderProps {\n    children: ReactNode;\n}\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLooping, setIsLooping] = useState(false);\n    const [isShuffling, setIsShuffling] = useState(false);\n\n    function play(episode: Episode) {\n        setEpisodeList([episode]);\n        setCurrentEpisodeIndex(0);\n        setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index: number) {\n        setEpisodeList(list);\n        setCurrentEpisodeIndex(index);\n        setIsPlaying(true);\n    }\n\n    function togglePlay() {\n        setIsPlaying(!isPlaying);\n    }\n\n    function toggleLoop() {\n        setIsLooping(!isLooping);\n    }\n\n    function toggleShuffle() {\n        setIsShuffling(!isShuffling);\n    }\n\n    function setPlayingState(state: boolean) {\n        setIsPlaying(state);\n    }\n\n    const hasPrevious = currentEpisodeIndex > 0;\n    const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n    function playNext() {\n        if (isShuffling) {\n            const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n            setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n        } else if (hasNext) {\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n        }\n    }\n\n    function playPrevious() {\n        if (hasPrevious) {\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n        }\n    }\n\n    function clearPlayerState() {\n        setEpisodeList([]);\n        setCurrentEpisodeIndex(0);\n    }\n\n    return (\n        <PlayerContext.Provider\n            value={{\n                episodeList,\n                currentEpisodeIndex,\n                isPlaying,\n                isLooping,\n                isShuffling,\n                play,\n                playNext,\n                playPrevious,\n                playList,\n                setPlayingState,\n                togglePlay,\n                toggleLoop,\n                toggleShuffle,\n                clearPlayerState,\n                hasPrevious,\n                hasNext,\n            }}\n        >\n            {children}\n        </PlayerContext.Provider>\n    );\n}\n\nexport const usePlayer = () => {\n    return useContext(PlayerContext);\n};\n"]},"metadata":{},"sourceType":"module"}